#
# (C) Copyright 2013 Enthought, Inc., Austin, TX
# All right reserved.
#
# This file is open source software distributed according to the terms in
# LICENSE.txt
#

from collections import namedtuple
from datetime import date, time

from enaml.core.api import Conditional, Looper
from enaml.stdlib.fields import IntField, FloatField
from enaml.widgets.api import (CheckBox, ComboBox, DateSelector, Field,
                               Form, Label, SpinBox, TimeSelector, Window)
from traits.api import BaseInstance, Bool, Enum, Float, Int, Range, Str

TraitDesc = namedtuple('TraitDesc', 'name trait_type ui_label')


def auto_view(model):
    """ Generate a view directly from a `HasTraits` instance.
    """
    return AutoView(model=model)


def auto_window(model):
    """ Generate a window directly from a `HasTraits` instance.
    """
    return AutoWindow(model=model)


def model_traits(model):
    traits = []
    for name in model.editable_traits():
        trait = model.trait(name)
        ui_label = " ".join(name.split('_')).capitalize()
        traits.append(TraitDesc(name, trait.trait_type, ui_label))
    return traits


enamldef BoolEditor(Conditional): bool_edit:
    attr loop_item
    condition = isinstance(bool_edit.loop_item.trait_type, Bool)
    CheckBox:
        checked << getattr(model, bool_edit.loop_item.name)
        checked :: setattr(model, bool_edit.loop_item.name, self.checked)


enamldef DateEditor(Conditional): date_edit:
    attr loop_item
    condition = (isinstance(date_edit.loop_item.trait_type, BaseInstance) and
                 date_edit.loop_item.trait_type.klass is date)
    DateSelector:
        date << getattr(model, date_edit.loop_item.name)
        date :: setattr(model, date_edit.loop_item.name, self.date)


enamldef EnumEditor(Conditional): enum_edit:
    attr loop_item
    condition = isinstance(enum_edit.loop_item.trait_type, Enum)
    ComboBox:
        index << enum_edit.loop_item.trait_type.values.index(getattr(model,
                                                                     enum_edit.loop_item.name))
        index ::
            item_value = enum_edit.loop_item.trait_type.values[self.index]
            setattr(model, enum_edit.loop_item.name, item_value)
        items = list(enum_edit.loop_item.trait_type.values)


enamldef FloatEditor(Conditional): flt_edit:
    attr loop_item
    condition = isinstance(flt_edit.loop_item.trait_type, Float)
    FloatField:
        value << getattr(model, flt_edit.loop_item.name)
        value :: setattr(model, flt_edit.loop_item.name, self.value)


enamldef FloatRangeEditor(Conditional): flt_edit:
    attr loop_item
    condition = (
        isinstance(flt_edit.loop_item.trait_type, Range) and
        (isinstance(flt_edit.loop_item.trait_type._low, float) or
         isinstance(flt_edit.loop_item.trait_type._high, float))
    )
    FloatField:
        value << getattr(model, flt_edit.loop_item.name)
        value :: setattr(model, flt_edit.loop_item.name, self.value)
        minimum = flt_edit.loop_item.trait_type._low
        maximum = flt_edit.loop_item.trait_type._high


enamldef IntEditor(Conditional): int_edit:
    attr loop_item
    condition = isinstance(int_edit.loop_item.trait_type, Int)
    IntField:
        value << getattr(model, int_edit.loop_item.name)
        value :: setattr(model, int_edit.loop_item.name, self.value)


enamldef IntRangeEditor(Conditional): int_edit:
    attr loop_item
    condition = (
        isinstance(int_edit.loop_item.trait_type, Range) and 
        isinstance(int_edit.loop_item.trait_type._low, int) and
        isinstance(int_edit.loop_item.trait_type._high, int)
    )
    SpinBox:
        value << getattr(model, int_edit.loop_item.name)
        value :: setattr(model, int_edit.loop_item.name, self.value)
        minimum = int_edit.loop_item.trait_type._low
        maximum = int_edit.loop_item.trait_type._high


enamldef StrEditor(Conditional): str_edit:
    attr loop_item
    condition = isinstance(str_edit.loop_item.trait_type, Str)
    Field:
        text << getattr(model, str_edit.loop_item.name)
        text :: setattr(model, str_edit.loop_item.name, self.text)


enamldef TimeEditor(Conditional): time_edit:
    attr loop_item
    condition = (isinstance(time_edit.loop_item.trait_type, BaseInstance) and
                 time_edit.loop_item.trait_type.klass is time)
    TimeSelector:
        time << getattr(model, time_edit.loop_item.name)
        time :: setattr(model, time_edit.loop_item.name, self.time)


enamldef AutoView(Form): _view:
    attr model

    Looper:
        iterable << model_traits(_view.model)

        # Unconditional
        Label:
            text = loop_item.ui_label

        # Conditional
        BoolEditor:
            loop_item << loop_item
        IntEditor:
            loop_item << loop_item
        FloatEditor:
            loop_item << loop_item
        StrEditor:
            loop_item << loop_item
        EnumEditor:
            loop_item << loop_item
        DateEditor:
            loop_item << loop_item
        TimeEditor:
            loop_item << loop_item
        IntRangeEditor:
            loop_item << loop_item
        FloatRangeEditor:
            loop_item << loop_item


enamldef AutoWindow(Window): auto_win:
    attr model

    title = "Edit Properties"

    AutoView:
        model << auto_win.model
